1. Создать двух пользователей (с помощью метода User.objects.create_user('username')).

    from users.models import User

    User.objects.create_user(username="Elena", email="elena@yandex.ru")
    <User: Elena>

    User.objects.create_user(username="Gavrila_Ivolgin", email="gavrila@yandex.ru")
    <User: Gavrila_Ivolgin>

    User.objects.create_user(username="Pavel", email="Pavel@yandex.ru")
    <User: Pavel>

2. Создать два объекта модели Author, связанные с пользователями.

    from news.models import Author

    user = User.objects.get(username='Elena')
    Author.objects.create(authorUser=user)

    user = User.objects.get(username="Gavrila_Ivolgin")
    Author.objects.create(authorUser=user)

3. Добавить 4 категории в модель Category.

    Category.objects.create(name="Спорт")

    Category.objects.create(name="Автомобиль")

    Category.objects.create(name="Экономика")

    Category.objects.create(name="Культура")

4. Добавить 2 статьи и 1 новость.

    """
    Author.objects.get_or_create(user=user_1) - это метод Django ORM, который позволяет получить объект Author из базы
    данных, соответствующий указанным параметрам, в данном случае user=user_1. Если объект не найден, то он будет создан
    с указанными параметрами.

    author_1, created - это две переменные, в которые сохраняются результаты выполнения метода get_or_create().
    author_1 будет содержать найденный или созданный объект Author, а created будет содержать флаг, указывающий был ли
    объект создан (True) или найден (False).
    """

    from news.models import Post

    user_1 = User.objects.get(username="Elena")
    user_2 = User.objects.get(username="Gavrila_Ivolgin")
    user_3 = User.objects.get(username="Pavel")

    author_1, created = Author.objects.get_or_create(authorUser=user_1)
    post_1 = Post.objects.create(author=author_1, categoryType=Post.ARTICLE, title="Пост автора Elena # 1: Какой-то заголовок", text="Какой-то текст", rating=1)

    author_2, created = Author.objects.get_or_create(authorUser=user_2)
    post_2 = Post.objects.create(author=author_2, categoryType=Post.ARTICLE, title="Пост автора Gavrila_Ivolgin # 1: Опять какой-то заголовок", text="Опять какой-то текст", rating=3)

    post_3 = Post.objects.create(author=author_2, categoryType=Post.NEWS, title="Новость автора Gavrila_Ivolgin # 1: Очередной заголовок", text="Более интересный текст", rating=2)


    author_3, created = Author.objects.get_or_create(authorUser=user_3)
    Post.objects.create(author=author_3, categoryType=Post.ARTICLE, title="Первый пост автора Pavel",
            text="(len=167): Этот пост повествует о том, как нужно создавать объекты экземпляра класса Post
            авторами постов и нужен для того, чтобы определить работу метода класса preview!", rating=5)


5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

    category_1 = Category.objects.get(name="Автомобиль")
    category_2 = Category.objects.get(name="Спорт")
    category_3 = Category.objects.get(name="Культура")
    category_4 = Category.objects.get(name="Экономика")
    или
    category = Category.objects.get(pk=1)  # <Category: Категория: Спорт>

    # Добавляем категории к записи Post
    post_1.postCategory.add(category_1, category_4, category_2, category_3)
    post_2.postCategory.add(category_4, category_2)
    post_3.postCategory.add(category_3, category_1)
    или
    Post.objects.last().postCategory.add(category)


6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

    from news.models import Comment

    comm_1 = Comment.objects.create(commentPost=post_1, commentUser=user_1, text="Это комментарий пользователя Елена к посту <Какой-то заголовок>", rating=1)
    comm_2 = Comment.objects.create(commentPost=post_2, commentUser=user_2, text="Это комментарий пользователя Gavrila_Ivolgin к посту <Опять какой-то заголовок>", rating=2)
    comm_3 = Comment.objects.create(commentPost=post_3, commentUser=user_2, text="Это комментарий пользователя Gavrila_Ivolgin к новости <Более интересный текст>", rating=3)
    comm_4 = Comment.objects.create(commentPost=post_3, commentUser=user_1, text="Это комментарий пользователя Елена к новости <Более интересный текст>", rating=2)

    comm = Comment.objects.create(commentPost=post_3, commentUser=user, text="Pavel комментирует пост пользователя Gavrila", rating=2)

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

    from news.models import Post

    post = Post.objects.get(id=8)
    <Post: Автор: Elena | title: Какой-то заголовок | rating: 1>
    post.like()
    <Post: Автор: Elena | title: Какой-то заголовок | rating: 2>

    post = Post.objects.get(id=10)
    <Post: Автор: Gavrila_Ivolgin | title: Очередной заголовок | rating: 2>
    post.dislike()
    <Post: Автор: Gavrila_Ivolgin | title: Очередной заголовок | rating: 1>

    from news.models import Comment

    com = Comment.objects.get(id=3)
    <Comment: Post: Автор: Gavrila_Ivolgin | title: Очередной заголовок | rating: 1 | user: Gavrila_Ivolgin | rating: 3>
    com.like()
    <Comment: Post: Автор: Gavrila_Ivolgin | title: Очередной заголовок | rating: 1 | user: Gavrila_Ivolgin | rating: 4>


8. Обновить рейтинги пользователей.

    from news.models import Author

    Author.objects.all()
    <QuerySet [<Author: Автор: Elena | Рейтинг: 0>, <Author: Автор: Gavrila_Ivolgin | Рейтинг: 0>]>


    author = Author.objects.get(pk=1)
    author.update_rating()
    author  # <Author: Автор: Elena | Рейтинг: 13>

    author = Author.objects.get(pk=2)
    author.update_rating()
    author  # <Author: Автор: Gavrila_Ivolgin | Рейтинг: 26>

    author = Author.objects.get(pk=3)
    author.update_rating()
    author  # <Author: Автор: Pavel | Рейтинг: 23>

9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

    authors = Author.objects.all().order_by("ratingAuthor").values("authorUser__username", "ratingAuthor").last()
    authors  # {'user__username': 'Gavrila_Ivolgin', 'rating': 26}

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на
    лайках/дислайках к этой статье.

    from news.models import *
    best_post = Post.objects.order_by("-rating").first()

    best_post.created_at  # Дата добавления
    datetime.datetime(2024, 3, 9, 19, 53, 55, 70267, tzinfo=datetime.timezone.utc)
    best_post.author.user.username  # username автора
    'Pavel'
    best_post.rating  # Рейтинг
    5
    best_post.title  # Заголовок
    'Первый пост автора Pavel'
    best_post.preview()  # Превью
    '(len=167): Этот пост повествует о том, как нужно создавать объекты экземпляра класса Post авторами постов и нужен для того, ...'

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

    best_post.id  # 11

    best_post.comment_set.all()  # Через связь

    comments = Comment.objects.filter(post=best_post.id)  # Через модель

    for comment in comments:
    date = comment.created_at
    user= comment.user.username
    rating = comment.rating
    text = comment.text
    print(date)
    print(user)
    print(rating)
    print(text)

    # 2024-03-10 08:57:52.772347+00:00
    # Gavrila
    # 2
    # Pavel комментирует пост пользователя Gavrila

    # 2024-03-10 08:59:17.921708+00:00
    # Gavrila
    # 3
    # Pavel ещё раз комментирует пост пользователя Gavrila, но уже более качественно

    # 2024-03-10 09:00:58.489020+00:00
    # Elena
    # 1
    # Elena комментирует пост пользователя Pavel

    # 2024-03-10 09:01:22.308685+00:00
    # Elena
    # 2
    # Elena комментирует пост пользователя Pavel ещё раз, но уже более качественно
