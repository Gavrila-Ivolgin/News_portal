"""
Django settings for news_portal project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import logging
from pathlib import Path
import os
import sys
import environ

env = environ.Env(
    # set casting, default value
    DEBUG=(bool),
    SECRET_KEY=(str),
    DOMAIN_NAME=(str),

    REDIS_HOST=(str),
    REDIS_PORT=(str),

    DATABASE_NAME=(str),
    DATABASE_USER=(str),
    DATABASE_PASSWORD=(str),
    DATABASE_HOST=(str),
    DATABASE_PORT=(str),

    EMAIL_HOST=(str),
    EMAIL_PORT=(int),
    EMAIL_HOST_USER=(str),
    EMAIL_HOST_PASSWORD=(str),
    EMAIL_USE_TLS=(bool),
    EMAIL_USE_SSL=(bool),
    DEFAULT_FROM_EMAIL=(str),

    ACCOUNT_ID_YOOKASSA=(int),
    SECRET_KEY_YOOKASSA=(str),
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Настройка локализации
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]

# Take environment variables from .env file
environ.Env.read_env(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = ['*']

DOMAIN_NAME = env('DOMAIN_NAME')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'django_filters',
    'django.contrib.sites',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',
    'allauth.socialaccount.providers.github',
    'django_apscheduler',  # Планировщик

    'news',
    'accounts',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',  # Настройка локализации
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'news_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [os.path.join(BASE_DIR, 'news/templates/news')],
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'news_portal.wsgi.application'

# Смена языка
LANGUAGES = [
    ('en-us', 'English'),
    ('ru', 'Русский')
]

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

LOGIN_REDIRECT_URL = "/news"
LOGOUT_REDIRECT_URL = '/'

SITE_ID = 2

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
"""
mandatory — не пускать пользователя на сайт до момента подтверждения почты;
optional — сообщение о подтверждении почты будет отправлено, но пользователь 
           может залогиниться на сайте без подтверждения почты.
"""
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_EMAIL_SUBJECT_PREFIX = '[News portal]'

# Позволит избежать дополнительного входа и активирует аккаунт сразу, как только мы перейдём по ссылке.
ACCOUNT_CONFIRM_EMAIL_ON_GET = True

# Чтобы allauth распознал нашу форму как ту, что должна выполняться вместо формы по умолчанию
ACCOUNT_FORMS = {"signup": "accounts.forms.CustomSignupForm"}

# Sending emails
"""
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_HOST = env('EMAIL_HOST')
    EMAIL_PORT = env('EMAIL_PORT')
    EMAIL_HOST_USER = env('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
    EMAIL_USE_TLS = env('EMAIL_USE_TLS')
    EMAIL_USE_SSL = env('EMAIL_USE_SSL')
    DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')
"""
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # Реальная почта
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Консоль

EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = env('EMAIL_USE_TLS')
EMAIL_USE_SSL = env('EMAIL_USE_SSL')
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')

SERVER_EMAIL = env('EMAIL_HOST_USER')
MANAGERS = (
    ('Gavrila', 'gavrivolgin@gmail.com'),
    ('Nata', 'Natveres@yandex.ru'),
)

ADMINS = (
    ('admin', 'Nebosst@yandex.ru'),
)

EMAIL_SUBJECT_PREFIX = '[News portal] '

# Celery
REDIS_HOST = env('REDIS_HOST')
REDIS_PORT = env('REDIS_PORT')

CELERY_BROKER_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}'
CELERY_RESULT_BACKEND = f'redis://{REDIS_HOST}:{REDIS_PORT}'

CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Caches FileBasedCache
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
    }
}

# Secure
SESSION_COOKIE_SECURE = True

# LOGGING
"""
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console_formatter': {
            'format': '%(asctime)s %(levelname)s %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'file_formatter': {
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'error_file_formatter': {
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s\n%(exc_info)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'security_file_formatter': {
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'email_formatter': {
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console_formatter',
            'level': 'DEBUG',
            'filters': ['debug_only'],
        },
        'general_file': {
            'class': 'logging.FileHandler',
            'filename': 'general.log',
            'formatter': 'file_formatter',
            'level': 'INFO',
            'filters': ['not_debug'],
        },
        'errors_file': {
            'class': 'logging.FileHandler',
            'filename': 'errors.log',
            'formatter': 'error_file_formatter',
            'level': 'ERROR',
            'filters': ['django_errors'],
        },
        'security_file': {
            'class': 'logging.FileHandler',
            'filename': 'security.log',
            'formatter': 'security_file_formatter',
            'level': 'INFO',
            'filters': ['django_security'],
        },
        'email': {
            'class': 'logging.handlers.SMTPHandler',
            'mailhost': 'your_mail_server',
            'fromaddr': 'sender@example.com',
            'toaddrs': ['recipient@example.com'],
            'subject': 'Error on your Django application',
            'formatter': 'email_formatter',
            'level': 'ERROR',
            'filters': ['django_email'],
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'general_file', 'errors_file', 'security_file', 'email'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['errors_file', 'email'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['errors_file', 'email'],
            'level': 'ERROR',
            'propagate': False,
        },
    },
    'filters': {
        'debug_only': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'not_debug': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'django_errors': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: record.levelno >= logging.ERROR,
        },
        'django_security': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: record.name == 'django.security',
        },
        'django_email': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: record.name in ['django.request', 'django.server'] and record.levelno >= logging.ERROR,
        },
    },
}
"""
